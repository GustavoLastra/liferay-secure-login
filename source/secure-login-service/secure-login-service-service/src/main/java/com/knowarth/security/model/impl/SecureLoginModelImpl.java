/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.knowarth.security.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.knowarth.security.model.SecureLogin;
import com.knowarth.security.model.SecureLoginModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SecureLogin service. Represents a row in the &quot;SLS_SecureLogin&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SecureLoginModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SecureLoginImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SecureLoginImpl
 * @see SecureLogin
 * @see SecureLoginModel
 * @generated
 */
@ProviderType
public class SecureLoginModelImpl extends BaseModelImpl<SecureLogin>
	implements SecureLoginModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a secure login model instance should use the {@link SecureLogin} interface instead.
	 */
	public static final String TABLE_NAME = "SLS_SecureLogin";
	public static final Object[][] TABLE_COLUMNS = {
			{ "secureLoginId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "registrationKey", Types.VARCHAR },
			{ "encodeToken", Types.VARCHAR },
			{ "encodeTokenDate", Types.TIMESTAMP },
			{ "qrCodeToken", Types.VARCHAR },
			{ "qrCodeTokenDate", Types.TIMESTAMP },
			{ "tokenValidated", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("secureLoginId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("registrationKey", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("encodeToken", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("encodeTokenDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("qrCodeToken", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("qrCodeTokenDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("tokenValidated", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table SLS_SecureLogin (secureLoginId LONG not null primary key,userId LONG,registrationKey VARCHAR(75) null,encodeToken VARCHAR(75) null,encodeTokenDate DATE null,qrCodeToken VARCHAR(75) null,qrCodeTokenDate DATE null,tokenValidated VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SLS_SecureLogin";
	public static final String ORDER_BY_JPQL = " ORDER BY secureLogin.secureLoginId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SLS_SecureLogin.secureLoginId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.knowarth.security.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.knowarth.security.model.SecureLogin"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.knowarth.security.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.knowarth.security.model.SecureLogin"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.knowarth.security.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.knowarth.security.model.SecureLogin"),
			true);
	public static final long REGISTRATIONKEY_COLUMN_BITMASK = 1L;
	public static final long USERID_COLUMN_BITMASK = 2L;
	public static final long SECURELOGINID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.knowarth.security.service.util.PropsUtil.get(
				"lock.expiration.time.com.knowarth.security.model.SecureLogin"));

	public SecureLoginModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _secureLoginId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSecureLoginId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _secureLoginId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SecureLogin.class;
	}

	@Override
	public String getModelClassName() {
		return SecureLogin.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("secureLoginId", getSecureLoginId());
		attributes.put("userId", getUserId());
		attributes.put("registrationKey", getRegistrationKey());
		attributes.put("encodeToken", getEncodeToken());
		attributes.put("encodeTokenDate", getEncodeTokenDate());
		attributes.put("qrCodeToken", getQrCodeToken());
		attributes.put("qrCodeTokenDate", getQrCodeTokenDate());
		attributes.put("tokenValidated", getTokenValidated());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long secureLoginId = (Long)attributes.get("secureLoginId");

		if (secureLoginId != null) {
			setSecureLoginId(secureLoginId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String registrationKey = (String)attributes.get("registrationKey");

		if (registrationKey != null) {
			setRegistrationKey(registrationKey);
		}

		String encodeToken = (String)attributes.get("encodeToken");

		if (encodeToken != null) {
			setEncodeToken(encodeToken);
		}

		Date encodeTokenDate = (Date)attributes.get("encodeTokenDate");

		if (encodeTokenDate != null) {
			setEncodeTokenDate(encodeTokenDate);
		}

		String qrCodeToken = (String)attributes.get("qrCodeToken");

		if (qrCodeToken != null) {
			setQrCodeToken(qrCodeToken);
		}

		Date qrCodeTokenDate = (Date)attributes.get("qrCodeTokenDate");

		if (qrCodeTokenDate != null) {
			setQrCodeTokenDate(qrCodeTokenDate);
		}

		String tokenValidated = (String)attributes.get("tokenValidated");

		if (tokenValidated != null) {
			setTokenValidated(tokenValidated);
		}
	}

	@Override
	public long getSecureLoginId() {
		return _secureLoginId;
	}

	@Override
	public void setSecureLoginId(long secureLoginId) {
		_secureLoginId = secureLoginId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getRegistrationKey() {
		if (_registrationKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _registrationKey;
		}
	}

	@Override
	public void setRegistrationKey(String registrationKey) {
		_columnBitmask |= REGISTRATIONKEY_COLUMN_BITMASK;

		if (_originalRegistrationKey == null) {
			_originalRegistrationKey = _registrationKey;
		}

		_registrationKey = registrationKey;
	}

	public String getOriginalRegistrationKey() {
		return GetterUtil.getString(_originalRegistrationKey);
	}

	@Override
	public String getEncodeToken() {
		if (_encodeToken == null) {
			return StringPool.BLANK;
		}
		else {
			return _encodeToken;
		}
	}

	@Override
	public void setEncodeToken(String encodeToken) {
		_encodeToken = encodeToken;
	}

	@Override
	public Date getEncodeTokenDate() {
		return _encodeTokenDate;
	}

	@Override
	public void setEncodeTokenDate(Date encodeTokenDate) {
		_encodeTokenDate = encodeTokenDate;
	}

	@Override
	public String getQrCodeToken() {
		if (_qrCodeToken == null) {
			return StringPool.BLANK;
		}
		else {
			return _qrCodeToken;
		}
	}

	@Override
	public void setQrCodeToken(String qrCodeToken) {
		_qrCodeToken = qrCodeToken;
	}

	@Override
	public Date getQrCodeTokenDate() {
		return _qrCodeTokenDate;
	}

	@Override
	public void setQrCodeTokenDate(Date qrCodeTokenDate) {
		_qrCodeTokenDate = qrCodeTokenDate;
	}

	@Override
	public String getTokenValidated() {
		if (_tokenValidated == null) {
			return StringPool.BLANK;
		}
		else {
			return _tokenValidated;
		}
	}

	@Override
	public void setTokenValidated(String tokenValidated) {
		_tokenValidated = tokenValidated;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SecureLogin.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SecureLogin toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SecureLogin)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SecureLoginImpl secureLoginImpl = new SecureLoginImpl();

		secureLoginImpl.setSecureLoginId(getSecureLoginId());
		secureLoginImpl.setUserId(getUserId());
		secureLoginImpl.setRegistrationKey(getRegistrationKey());
		secureLoginImpl.setEncodeToken(getEncodeToken());
		secureLoginImpl.setEncodeTokenDate(getEncodeTokenDate());
		secureLoginImpl.setQrCodeToken(getQrCodeToken());
		secureLoginImpl.setQrCodeTokenDate(getQrCodeTokenDate());
		secureLoginImpl.setTokenValidated(getTokenValidated());

		secureLoginImpl.resetOriginalValues();

		return secureLoginImpl;
	}

	@Override
	public int compareTo(SecureLogin secureLogin) {
		long primaryKey = secureLogin.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SecureLogin)) {
			return false;
		}

		SecureLogin secureLogin = (SecureLogin)obj;

		long primaryKey = secureLogin.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SecureLoginModelImpl secureLoginModelImpl = this;

		secureLoginModelImpl._originalUserId = secureLoginModelImpl._userId;

		secureLoginModelImpl._setOriginalUserId = false;

		secureLoginModelImpl._originalRegistrationKey = secureLoginModelImpl._registrationKey;

		secureLoginModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SecureLogin> toCacheModel() {
		SecureLoginCacheModel secureLoginCacheModel = new SecureLoginCacheModel();

		secureLoginCacheModel.secureLoginId = getSecureLoginId();

		secureLoginCacheModel.userId = getUserId();

		secureLoginCacheModel.registrationKey = getRegistrationKey();

		String registrationKey = secureLoginCacheModel.registrationKey;

		if ((registrationKey != null) && (registrationKey.length() == 0)) {
			secureLoginCacheModel.registrationKey = null;
		}

		secureLoginCacheModel.encodeToken = getEncodeToken();

		String encodeToken = secureLoginCacheModel.encodeToken;

		if ((encodeToken != null) && (encodeToken.length() == 0)) {
			secureLoginCacheModel.encodeToken = null;
		}

		Date encodeTokenDate = getEncodeTokenDate();

		if (encodeTokenDate != null) {
			secureLoginCacheModel.encodeTokenDate = encodeTokenDate.getTime();
		}
		else {
			secureLoginCacheModel.encodeTokenDate = Long.MIN_VALUE;
		}

		secureLoginCacheModel.qrCodeToken = getQrCodeToken();

		String qrCodeToken = secureLoginCacheModel.qrCodeToken;

		if ((qrCodeToken != null) && (qrCodeToken.length() == 0)) {
			secureLoginCacheModel.qrCodeToken = null;
		}

		Date qrCodeTokenDate = getQrCodeTokenDate();

		if (qrCodeTokenDate != null) {
			secureLoginCacheModel.qrCodeTokenDate = qrCodeTokenDate.getTime();
		}
		else {
			secureLoginCacheModel.qrCodeTokenDate = Long.MIN_VALUE;
		}

		secureLoginCacheModel.tokenValidated = getTokenValidated();

		String tokenValidated = secureLoginCacheModel.tokenValidated;

		if ((tokenValidated != null) && (tokenValidated.length() == 0)) {
			secureLoginCacheModel.tokenValidated = null;
		}

		return secureLoginCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{secureLoginId=");
		sb.append(getSecureLoginId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", registrationKey=");
		sb.append(getRegistrationKey());
		sb.append(", encodeToken=");
		sb.append(getEncodeToken());
		sb.append(", encodeTokenDate=");
		sb.append(getEncodeTokenDate());
		sb.append(", qrCodeToken=");
		sb.append(getQrCodeToken());
		sb.append(", qrCodeTokenDate=");
		sb.append(getQrCodeTokenDate());
		sb.append(", tokenValidated=");
		sb.append(getTokenValidated());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.knowarth.security.model.SecureLogin");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>secureLoginId</column-name><column-value><![CDATA[");
		sb.append(getSecureLoginId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registrationKey</column-name><column-value><![CDATA[");
		sb.append(getRegistrationKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>encodeToken</column-name><column-value><![CDATA[");
		sb.append(getEncodeToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>encodeTokenDate</column-name><column-value><![CDATA[");
		sb.append(getEncodeTokenDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>qrCodeToken</column-name><column-value><![CDATA[");
		sb.append(getQrCodeToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>qrCodeTokenDate</column-name><column-value><![CDATA[");
		sb.append(getQrCodeTokenDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tokenValidated</column-name><column-value><![CDATA[");
		sb.append(getTokenValidated());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SecureLogin.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SecureLogin.class
		};
	private long _secureLoginId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _registrationKey;
	private String _originalRegistrationKey;
	private String _encodeToken;
	private Date _encodeTokenDate;
	private String _qrCodeToken;
	private Date _qrCodeTokenDate;
	private String _tokenValidated;
	private long _columnBitmask;
	private SecureLogin _escapedModel;
}